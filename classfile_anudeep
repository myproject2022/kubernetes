pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: demo-pod
  labels:
    app: demo
spec:
  containers:
  - name: demo-container1
    image: busybox
    command: ['sh', '-c', 'echo container1 && sleep 300']
  - name: demo-container2
    image: busybox
    command: ['sh', '-c', 'echo container2 && sleep 300']






[ec2-user@ip-172-31-1-98 apps]$ kubectl create -f pod.yaml


ReplicaSets

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-rs
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-rs
  template:
    metadata:
      labels:
        app: my-rs
    spec:
      containers: 
      - name: rs
        image: nginx



kubectl create -f replicasets.yaml

kubectl scale replicaset my-rs --replicas=10

kubectl get pods

kubectl delete pod my-rs-2fncm




Deployments


deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80



deployment   Selector:               app=nginx
             
             Labels:         app=nginx
                             pod-template-hash=69c44dfb78
replicaset   Selector:       app=nginx
                             pod-template-hash=69c44dfb78

pod         Labels:          app=nginx
                             pod-template-hash=69c44dfb78











$ kubectl create -f deployment.yaml

$ kubectl get deployment

$ kubectl get rs
$ kubectl get pods

$ kubectl describe deployment | grep Image

$ kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.15.4 --record

$  kubectl get deployment
$  kubectl describe deployment | grep Image


Rollback a Deployment

$ kubectl rollout undo deployment.v1.apps/nginx-deployment

$ kubectl get deployment

$ kubectl describe deployment | grep Image

$ kubectl scale deployment.v1.apps/nginx-deployment --replicas=2





Services:



ClusterIP Service


deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80




$ kubectl create -f deployment.yaml


clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


kubectl create -f clusterip.yaml


$ kubectl get pods -o wide | awk {'print $1" " $3 " " $6'} | column -t

$ kubectl describe service myservice

Here we start and log in a new Pod running ubuntu Linux.

$ kubectl run my-test --rm -i --tty --image ubuntu -- bash


root@my-test-5795787c7d-b6h92:/# apt-get update && apt-get install curl
root@my-test-5795787c7d-b6h92:/# curl http://my-service




NodePort Service


apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80



cluster ip 80 ---> targetPort: 80
worker node 30000 to 650000

w1        w2     w3
32000    32000   32000


http://<worker ip>:32000

$ kubectl delete service myservice

$ kubectl create -f nodeport.yaml

$ kubectl get service/myservice

$ kubectl get nodes -o wide |  awk {'print $1" " $2 " " $7'} | column -t

$ curl --silent 34.214.98.130:32009  | grep title

$ curl --silent 52.25.93.45:32009 | grep title



LoadBalancer Service


apiVersion: v1
kind: Service
metadata:
  name: myservice
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

cluster ip 80 ---> targetPort: 80
ELB 80  ---> target group <all workers>



$ kubectl delete service myservice
$ kubectl create -f loadbalancer.yaml

$ kubectl get service/myservice |  awk {'print $1" " $2 " " $4 " " $5'} | column -t


$ curl -silent adb010d2006b511e99d7702abbb5e7b9-679524454.us-west-2.elb.amazonaws.com:80 | grep title











configmap.yaml

apiVersion: v1 
kind: ConfigMap 
metadata:
   name: cm-demo
data:
   App: web



kubectl create -f configmap.yaml



deployment-configmap.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-configmap-deployment
  labels:
    app: nginx-configmap
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-configmap
  template:
    metadata:
      labels:
        app: nginx-configmap
    spec:
      containers:
      - name: nginx-configmap
        image: nginx:1.9.1
        ports:
        - containerPort: 80
        env:
        - name: App
          valueFrom:
            configMapKeyRef:
              name: cm-demo
              key: App



kubectl create -f deployment-configmap.yaml

kubectl get pods | grep configmap




$ ls data
config.ini
tomcat-user.xml


$ kubectl create configmap my-config --from-file=data
configmap/my-config created



deployment-configmap-file.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-configmap-deployment
  labels:
    app: nginx-configmap
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-configmap
  template:
    metadata:
      labels:
        app: nginx-configmap
    spec:
      containers:
      - name: nginx-configmap
        image: nginx:1.9.1
        ports:
        - containerPort: 80
        volumeMounts:
          - name: my-config-vol
            mountPath: /usr/src/app/config
      volumes:
      - name: my-config-vol
        configMap:
          name: my-config


kubectl create -f deployment-configmap-file.yaml



Secret:

echo -n 'admin' | base64

echo -n 'devops123' | base64


secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
data:
  username: YWRtaW4=
  password: ZGV2b3BzMTIz


$ kubectl create -f secret.yaml
secret/my-secret created

$ kubectl get secret my-secret


$ kubectl create secret generic my-secret-1 --from-literal=username='admin' --from-literal=password='Passw0rd'


Create a Deployment which accessing the secret data through a Volume


deployment-secret.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-secret-deployment
  labels:
    app: nginx-secret-demo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-secret-demo
  template:
    metadata:
      labels:
        app: nginx-secret-demo
    spec:
      containers:
      - name: nginx-secret-demo
        image: nginx:1.9.1
        ports:
        - containerPort: 80
        volumeMounts:
          - name: my-secret-volume
            mountPath: /usr/src/app/secret
      volumes:
      - name: my-secret-volume
        secret:
          secretName: my-secret



$ kubectl create -f deployment-secret.yaml


$ kubectl exec -it nginx-secret-deployment-5db97c4c7b-bjpmn sh
# cd /usr/src/app/secret
# ls -l
lrwxrwxrwx 1 root root 15 Jan 10 14:53 password -> ..data/password
lrwxrwxrwx 1 root root 15 Jan 10 14:53 username -> ..data/username
# more password
Passw0rd
# more username
admin



Create a Deployment accessing the secret data through environment variables


deployment-secret-env.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-secret-env-deployment
  labels:
    app: nginx-secret-env
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-secret-env
  template:
    metadata:
      labels:
        app: nginx-secret-env
    spec:
      containers:
      - name: nginx-secret-env
        image: nginx:1.9.1
        ports:
        - containerPort: 80
        env:
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: password


$ kubectl create -f deployment-secret-env.yaml


$ kubectl get pods | grep secret-env

$ kubectl exec -it nginx-secret-env-deployment-755c5965fc-8jlqt sh



